/* Automatically generated by wasm2c */
#ifndef MINER_H_GENERATED_
#define MINER_H_GENERATED_

#include <stdint.h>

#include "wasm-rt.h"

#if defined(WASM_RT_ENABLE_SIMD)
#include "simde/wasm/simd128.h"
#endif

/* TODO(binji): only use stdint.h types in header */
#ifndef WASM_RT_CORE_TYPES_DEFINED
#define WASM_RT_CORE_TYPES_DEFINED
typedef uint8_t u8;
typedef int8_t s8;
typedef uint16_t u16;
typedef int16_t s16;
typedef uint32_t u32;
typedef int32_t s32;
typedef uint64_t u64;
typedef int64_t s64;
typedef float f32;
typedef double f64;

#if defined(WASM_RT_ENABLE_SIMD)
typedef simde_v128_t v128;
#endif

#endif

#ifdef __cplusplus
extern "C" {
#endif

struct Z_env_instance_t;
extern u32* Z_envZ_DYNAMICTOP_PTR(struct Z_env_instance_t*);
extern u32* Z_envZ_STACKTOP(struct Z_env_instance_t*);
extern wasm_rt_memory_t* Z_envZ_memory(struct Z_env_instance_t*);
extern wasm_rt_funcref_table_t* Z_envZ_table(struct Z_env_instance_t*);
extern u32* Z_envZ_tableBase(struct Z_env_instance_t*);

typedef struct Z_originalZ2Dminer_instance_t {
  struct Z_env_instance_t* Z_env_instance;
  /* import: 'env' 'DYNAMICTOP_PTR' */
  u32 *Z_envZ_DYNAMICTOP_PTR;
  /* import: 'env' 'STACKTOP' */
  u32 *Z_envZ_STACKTOP;
  /* import: 'env' 'memory' */
  wasm_rt_memory_t *Z_envZ_memory;
  /* import: 'env' 'table' */
  wasm_rt_funcref_table_t *Z_envZ_table;
  /* import: 'env' 'tableBase' */
  u32 *Z_envZ_tableBase;
  u32 w2c_g3;
  u32 w2c_g4;
} Z_originalZ2Dminer_instance_t;

void Z_originalZ2Dminer_instantiate(Z_originalZ2Dminer_instance_t*, struct Z_env_instance_t*);
void Z_originalZ2Dminer_free(Z_originalZ2Dminer_instance_t*);
wasm_rt_func_type_t Z_originalZ2Dminer_get_func_type(uint32_t param_count, uint32_t result_count, ...);

/* import: 'env' '___setErrNo' */
void Z_envZ____setErrNo(struct Z_env_instance_t*, u32);
/* import: 'env' '___syscall20' */
u32 Z_envZ____syscall20(struct Z_env_instance_t*, u32, u32);
/* import: 'env' '_emscripten_memcpy_big' */
u32 Z_envZ__emscripten_memcpy_big(struct Z_env_instance_t*, u32, u32, u32);
/* import: 'env' '_ftime' */
u32 Z_envZ__ftime(struct Z_env_instance_t*, u32);
/* import: 'env' '_gmtime' */
u32 Z_envZ__gmtime(struct Z_env_instance_t*, u32);
/* import: 'env' 'abort' */
void Z_envZ_abort(struct Z_env_instance_t*, u32);
/* import: 'env' 'abortOnCannotGrowMemory' */
u32 Z_envZ_abortOnCannotGrowMemory(struct Z_env_instance_t*);
/* import: 'env' 'enlargeMemory' */
u32 Z_envZ_enlargeMemory(struct Z_env_instance_t*);
/* import: 'env' 'getTotalMemory' */
u32 Z_envZ_getTotalMemory(struct Z_env_instance_t*);

extern const u32 Z_originalZ2Dminer_min_Z_envZ_memory;

extern const u32 Z_originalZ2Dminer_max_Z_envZ_memory;

/* export: '_aesb_single_round' */
void Z_originalZ2DminerZ__aesb_single_round(Z_originalZ2Dminer_instance_t*, u32, u32, u32);

/* export: '_cryptonight_create' */
u32 Z_originalZ2DminerZ__cryptonight_create(Z_originalZ2Dminer_instance_t*);

/* export: '_cryptonight_destroy' */
void Z_originalZ2DminerZ__cryptonight_destroy(Z_originalZ2Dminer_instance_t*, u32);

/* export: '_cryptonight_hash_variant_0' */
void Z_originalZ2DminerZ__cryptonight_hash_variant_0(Z_originalZ2Dminer_instance_t*, u32, u32, u32, u32);

/* export: '_cryptonight_hash_variant_1' */
void Z_originalZ2DminerZ__cryptonight_hash_variant_1(Z_originalZ2Dminer_instance_t*, u32, u32, u32, u32);

/* export: '_malloc' */
u32 Z_originalZ2DminerZ__malloc(Z_originalZ2Dminer_instance_t*, u32);

/* export: 'stackAlloc' */
u32 Z_originalZ2DminerZ_stackAlloc(Z_originalZ2Dminer_instance_t*, u32);

#ifdef __cplusplus
}
#endif

#endif  /* MINER_H_GENERATED_ */
