emcc: warning: LLVM version for clang executable "/usr/local/bin/clang" appears incorrect (seeing "16.0", expected "17") [-Wversion-check]
../asteroids/main.c:196:37: warning: '__visibility__' attribute ignored when parsing type [-Wignored-attributes]
  if (tmp___0 < (int __attribute__((__visibility__("default")))  )0) {
                                    ^~~~~~~~~~~~~~~~~~~~~~~~~
std::mt19937_64 seeded with current timestamp: 1679666799722
Initializing Hikari Core with Revision ID:dc9664d3ffbd6539efca6fbc18506fb7f8883093
Running Hikari On /llvm/dataset/wasm-asteroids/wasm-asteroids.c
Failed To Link PreCompiled AntiHooking IR From:/root/Hikari/PrecompiledAntiHooking-unknown-unknown.bc
Doing Post-Run Cleanup
Running IndirectBranch On init_asteroids
Running IndirectBranch On multiply_vector
Running IndirectBranch On add_vector
Running IndirectBranch On update_asteroids
Running IndirectBranch On add_vector_new
Running IndirectBranch On rotate_vector
Running IndirectBranch On draw_asteroids
Running IndirectBranch On draw_line
Running IndirectBranch On shrink_asteroid
Running IndirectBranch On divide_vector
Running IndirectBranch On spawn_asteroids
Running IndirectBranch On bounds_asteroids
Running IndirectBranch On collision_asteroids
Running IndirectBranch On mainloop
Running IndirectBranch On get_direction
Running IndirectBranch On apply_force
Running IndirectBranch On rotate_player
Running IndirectBranch On shoot_bullet
Running IndirectBranch On clear_pixels
Running IndirectBranch On update_player
Running IndirectBranch On bounds_player
Running IndirectBranch On draw_player
Running IndirectBranch On __main_argc_argv
Running IndirectBranch On init
Running IndirectBranch On init_player
Running IndirectBranch On normalise_vector
Running IndirectBranch On draw_pixel
Running IndirectBranch On limit_vector
Running IndirectBranch On print_vector
Running IndirectBranch On magnitude_vector
Running IndirectBranch On HikariIndirectBranchTargetWrapper
Hikari Out
Spend Time: 0.0016625s
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /usr/local/bin/clang -target wasm32-unknown-emscripten -fignore-exceptions -fvisibility=default -mllvm -combiner-global-alias-analysis=false -mllvm -enable-emscripten-sjlj -mllvm -disable-lsr -DEMSCRIPTEN -Werror=implicit-function-declaration -I/src/emscripten/cache/sysroot/include/SDL2 --sysroot=/src/emscripten/cache/sysroot -Xclang -iwithsysroot/include/compat -O2 -I -fmacro-backtrace-limit=0 -mllvm -enable-indibran /llvm/dataset/wasm-asteroids/wasm-asteroids.c -c -o /tmp/emscripten_temp_blj1hs5n/wasm-asteroids_0.o
1.	<eof> parser at end of file
2.	Code generation
3.	Running pass 'Function Pass Manager' on module '/llvm/dataset/wasm-asteroids/wasm-asteroids.c'.
4.	Running pass 'CodeGen Prepare' on function '@init_asteroids'
 #0 0x000055a50831b6f3 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) (/usr/local/bin/clang+0x18986f3)
 #1 0x000055a50831a354 llvm::sys::RunSignalHandlers() (/usr/local/bin/clang+0x1897354)
 #2 0x000055a5082d32cd (anonymous namespace)::CrashRecoveryContextImpl::HandleCrash(int, unsigned long) CrashRecoveryContext.cpp:0:0
 #3 0x000055a5082d3622 CrashRecoverySignalHandler(int) CrashRecoveryContext.cpp:0:0
 #4 0x00007f726c8f2f50 (/usr/lib/libc.so.6+0x38f50)
 #5 0x000055a507bd476b llvm::PHINode::getIncomingValueForBlock(llvm::BasicBlock const*) const (/usr/local/bin/clang+0x115176b)
 #6 0x000055a507cdae8c (anonymous namespace)::CodeGenPrepare::eliminateMostlyEmptyBlocks(llvm::Function&) CodeGenPrepare.cpp:0:0
 #7 0x000055a507ceb5ec (anonymous namespace)::CodeGenPrepare::runOnFunction(llvm::Function&) (.part.0) CodeGenPrepare.cpp:0:0
 #8 0x000055a507fa2940 llvm::FPPassManager::runOnFunction(llvm::Function&) (/usr/local/bin/clang+0x151f940)
 #9 0x000055a507fa2ad1 llvm::FPPassManager::runOnModule(llvm::Module&) (/usr/local/bin/clang+0x151fad1)
#10 0x000055a507fa3106 llvm::legacy::PassManagerImpl::run(llvm::Module&) (/usr/local/bin/clang+0x1520106)
#11 0x000055a5084aef45 clang::EmitBackendOutput(clang::DiagnosticsEngine&, clang::HeaderSearchOptions const&, clang::CodeGenOptions const&, clang::TargetOptions const&, clang::LangOptions const&, llvm::StringRef, llvm::Module*, clang::BackendAction, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream>>) (/usr/local/bin/clang+0x1a2bf45)
#12 0x000055a508bf2544 clang::BackendConsumer::HandleTranslationUnit(clang::ASTContext&) (/usr/local/bin/clang+0x216f544)
#13 0x000055a5091dd65f clang::ParseAST(clang::Sema&, bool, bool) (/usr/local/bin/clang+0x275a65f)
#14 0x000055a50889bd5e clang::FrontendAction::Execute() (/usr/local/bin/clang+0x1e18d5e)
#15 0x000055a508860bf1 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) (/usr/local/bin/clang+0x1dddbf1)
#16 0x000055a5088f86a7 clang::ExecuteCompilerInvocation(clang::CompilerInstance*) (/usr/local/bin/clang+0x1e756a7)
#17 0x000055a5079462f9 cc1_main(llvm::ArrayRef<char const*>, char const*, void*) (/usr/local/bin/clang+0xec32f9)
#18 0x000055a507942e3e ExecuteCC1Tool(llvm::SmallVectorImpl<char const*>&) driver.cpp:0:0
#19 0x000055a5087a7e49 void llvm::function_ref<void ()>::callback_fn<clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const::'lambda'()>(long) Job.cpp:0:0
#20 0x000055a5082d372a llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) (/usr/local/bin/clang+0x185072a)
#21 0x000055a5087a85c3 clang::driver::CC1Command::Execute(llvm::ArrayRef<std::optional<llvm::StringRef>>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>*, bool*) const (.part.0) Job.cpp:0:0
#22 0x000055a50878c107 clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const (/usr/local/bin/clang+0x1d09107)
#23 0x000055a50878c222 clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&, bool) const (/usr/local/bin/clang+0x1d09222)
#24 0x000055a508790f84 clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) (/usr/local/bin/clang+0x1d0df84)
#25 0x000055a507944dd2 clang_main(int, char**) (/usr/local/bin/clang+0xec1dd2)
#26 0x00007f726c8dd790 (/usr/lib/libc.so.6+0x23790)
#27 0x00007f726c8dd84a __libc_start_main (/usr/lib/libc.so.6+0x2384a)
#28 0x000055a507941145 _start (/usr/local/bin/clang+0xebe145)
clang-16: error: clang frontend command failed with exit code 139 (use -v to see invocation)
clang version 16.0.0 (https://github.com/61bcdefg/Hikari-LLVM15.git e1b34265d7f8a681dd1ad0c3a96d3658b4fcc1b7)
Target: wasm32-unknown-emscripten
Thread model: posix
InstalledDir: /usr/local/bin
clang-16: note: diagnostic msg: 
********************

PLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:
Preprocessed source(s) and associated run script(s) are located at:
clang-16: note: diagnostic msg: /tmp/wasm-asteroids-8efb5a.c
clang-16: note: diagnostic msg: /tmp/wasm-asteroids-8efb5a.sh
clang-16: note: diagnostic msg: 

********************
emcc: error: '/usr/local/bin/clang -target wasm32-unknown-emscripten -fignore-exceptions -fvisibility=default -mllvm -combiner-global-alias-analysis=false -mllvm -enable-emscripten-sjlj -mllvm -disable-lsr -DEMSCRIPTEN -Werror=implicit-function-declaration -I/src/emscripten/cache/sysroot/include/SDL2 --sysroot=/src/emscripten/cache/sysroot -Xclang -iwithsysroot/include/compat -O2 -I -fmacro-backtrace-limit=0 -mllvm -enable-indibran /llvm/dataset/wasm-asteroids/wasm-asteroids.c -c -o /tmp/emscripten_temp_blj1hs5n/wasm-asteroids_0.o' failed (returned 1)
